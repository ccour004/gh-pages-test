{"version":3,"sources":["SearchAppBar.js","FullWidthGrid.js","App.js","serviceWorker.js","index.js"],"names":["styles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","display","breakpoints","up","search","position","borderRadius","shape","backgroundColor","fade","palette","common","white","marginLeft","width","searchIcon","padding","height","pointerEvents","alignItems","justifyContent","inputRoot","color","inputInput","paddingLeft","transition","transitions","create","SearchAppBar","classes","this","props","className","AppBar","Toolbar","Typography","variant","noWrap","login","React","Component","withStyles","FullWidthGrid","state","files","Grid","container","map","file","item","xs","Paper","paper","name","margin","textAlign","text","secondary","Login","render","loggedIn","clientId","process","onLogoutSuccess","setState","onFailure","error","details","alert","JSON","stringify","onSuccess","returnObj","accessType","scope","cookiePolicy","isSignedIn","App","loginSuccess","child","fetch","headers","accessToken","then","response","json","data","catch","e","console","dir","ref","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.1345215d.chunk.js","sourcesContent":["import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { fade, makeStyles, withStyles } from '@material-ui/core/styles';\n\nconst styles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n    display: 'none',\n    [theme.breakpoints.up('sm')]: {\n      display: 'block',\n    },\n  },\n  search: {\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing(1),\n      width: 'auto',\n    },\n  },\n  searchIcon: {\n    padding: theme.spacing(0, 2),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  inputRoot: {\n    color: 'inherit',\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 0),\n    // vertical padding + font size from searchIcon\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      width: '12ch',\n      '&:focus': {\n        width: '20ch',\n      },\n    },\n  },\n}));\n\nclass SearchAppBar extends React.Component{\n  render(){\n    const {classes} = this.props;\n    return (\n        <div className={classes.root}>\n        <AppBar position=\"static\">\n            <Toolbar>\n                <Typography className={classes.title} variant=\"h6\" noWrap>\n                    File Viewer\n                </Typography>\n            </Toolbar>\n            {this.props.login}\n        </AppBar>\n        </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(SearchAppBar)","import React from 'react';\nimport {withStyles} from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n    'margin-right': '40px',\n    '& > *': {\n        margin: theme.spacing(1),\n      },\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n});\n\nclass FullWidthGrid extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state={files:[]}\n  }\n  \n  render(){\n    const {classes} = this.props;\n    const {files} = this.state;\n    return (\n        <div className={classes.root}>\n          <Grid container spacing={3}>\n          {files.map((file)=>{\n              return <Grid item xs={12}>\n                  <Paper className={classes.paper}>{file.name}</Paper>\n                  </Grid>\n          })}\n          </Grid>\n        </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(FullWidthGrid)","import React from 'react';\nimport SearchAppBar from './SearchAppBar.js';\nimport FullWidthGrid from './FullWidthGrid.js';\nimport { GoogleLogin, GoogleLogout } from 'react-google-login';\nimport './App.css';\n\nclass Login extends React.Component{\n  constructor(props){\n    super(props);\n    this.state={loggedIn:false}\n  }\n\n  render = () =>{\n    return this.state.loggedIn?\n    <GoogleLogout\n      clientId={process.env.REACT_APP_CLIENT_ID}\n      onLogoutSuccess={()=>this.setState({loggedIn:false})}\n      onFailure={(error,details)=>alert(\"Logout failure: \"+JSON.stringify(error)+\"(\"+details+\")\")}\n    />\n    :\n    <GoogleLogin\n      clientId={process.env.REACT_APP_CLIENT_ID}\n      onSuccess={(returnObj)=>{this.setState({loggedIn:true});this.props.onSuccess(returnObj)}}\n      onFailure={(error,details)=>this.props.onFailure(error,details)}\n      accessType=\"offline\"\n      scope={this.props.scope}\n      cookiePolicy={'single_host_origin'}\n      isSignedIn={this.state.loggedIn}\n    />  \n  }\n}\n\nclass App extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state={files:[]}\n  }\n\n  loginSuccess = (returnObj,child) => {\n    fetch(`https://www.googleapis.com/drive/v3/files?key=${process.env.REACT_APP_CLIENT_ID}`,\n      {headers: {\n        \"Authorization\": `Bearer ${returnObj.accessToken}`,\n        \"Accept\": \"application/json\"\n      }})\n      .then(response => response.json())\n      .then((data) => child.setState({files:data.files}))\n      .catch(e => console.dir(e))\n  }\n\n  render = () => {\n    return (\n      <div>\n      <SearchAppBar login={<Login \n          onSuccess={(returnObj)=>this.loginSuccess(returnObj,this.child)}\n          onFailure={(error,details)=>alert(\"Login failure: \"+JSON.stringify(error)+\"(\"+details+\")\")}\n          scope={\"https://www.googleapis.com/auth/drive.metadata.readonly\"}\n        />} \n      />\n      <FullWidthGrid ref={child => this.child = child}/>\n      </div>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}