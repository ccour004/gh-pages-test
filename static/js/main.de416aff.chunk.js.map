{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","loginSuccess","returnObj","fetch","process","headers","accessToken","then","response","json","data","setState","files","state","className","clientId","onSuccess","onFailure","error","details","alert","JSON","stringify","accessType","scope","cookiePolicy","isSignedIn","this","onLogoutSuccess","List","map","file","Card","ListItem","ListItemText","primary","name","secondary","kind","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"8TA0DeA,G,wDAjDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAIRC,aAAe,SAACC,GACdC,MAAM,iDAAD,OAAkDC,4EACrD,CAACC,QAAS,CACR,cAAgB,UAAhB,OAA2BH,EAAUI,aACrC,OAAU,sBAEXC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKC,SAAS,CAACC,MAAMF,EAAKE,YAV1C,EAAKC,MAAM,CAACD,MAAM,IAFD,E,qDAeV,IAAD,OACN,OACE,yBAAKE,UAAU,OACf,4BAAQA,UAAU,cAChB,kBAAC,cAAD,CACEC,SAAUX,2EACVY,UAAW,SAACd,GAAD,OAAa,EAAKD,aAAaC,IAC1Ce,UAAW,SAACC,EAAMC,GAAP,OAAiBC,MAAM,kBAAkBC,KAAKC,UAAUJ,GAAO,IAAIC,EAAQ,MACtFI,WAAW,UACXC,MAAM,0DACNC,aAAc,qBACdC,YAAY,IAEbC,KAAKd,MAAMD,QAAU,GACpB,6BACA,kBAAC,eAAD,CACEG,SAAUX,2EACVwB,gBAAiB,kBAAI,EAAKjB,SAAS,CAACC,MAAM,MAC1CK,UAAW,SAACC,EAAMC,GAAP,OAAiBC,MAAM,mBAAmBC,KAAKC,UAAUJ,GAAO,IAAIC,EAAQ,QAEzF,kBAACU,EAAA,EAAD,KACGF,KAAKd,MAAMD,MAAMkB,KAAI,SAACC,GACrB,OAAO,kBAACC,EAAA,EAAD,KAAM,kBAACC,EAAA,EAAD,KAAU,kBAACC,EAAA,EAAD,CAAcC,QAASJ,EAAKK,KAAMC,UAAWN,EAAKO,cAK9E,oC,GA3CSC,IAAMC,YCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9C,MAAK,SAAA+C,GACJA,EAAaC,gBAEdC,OAAM,SAAAtC,GACLuC,QAAQvC,MAAMA,EAAMwC,c","file":"static/js/main.de416aff.chunk.js","sourcesContent":["import React from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Card from '@material-ui/core/Card';\nimport { GoogleLogin, GoogleLogout } from 'react-google-login';\nimport './App.css';\n\nclass App extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state={files:[]}\n  }\n\n  loginSuccess = (returnObj) => {\n    fetch(`https://www.googleapis.com/drive/v3/files?key=${process.env.REACT_APP_CLIENT_ID}`,\n      {headers: {\n        \"Authorization\": `Bearer ${returnObj.accessToken}`,\n        \"Accept\": \"application/json\"\n      }})\n      .then(response => response.json())\n      .then(data => this.setState({files:data.files}))\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n      <header className=\"App-header\">\n        <GoogleLogin\n          clientId={process.env.REACT_APP_CLIENT_ID}\n          onSuccess={(returnObj)=>this.loginSuccess(returnObj)}\n          onFailure={(error,details)=>alert(\"Login failure: \"+JSON.stringify(error)+\"(\"+details+\")\")}\n          accessType=\"offline\"\n          scope=\"https://www.googleapis.com/auth/drive.metadata.readonly\"\n          cookiePolicy={'single_host_origin'}\n          isSignedIn={true}\n        />\n        {this.state.files !== []?\n          <div>\n          <GoogleLogout\n            clientId={process.env.REACT_APP_CLIENT_ID}\n            onLogoutSuccess={()=>this.setState({files:[]})}\n            onFailure={(error,details)=>alert(\"Logout failure: \"+JSON.stringify(error)+\"(\"+details+\")\")}\n          />\n          <List>\n            {this.state.files.map((file)=>{\n              return <Card><ListItem><ListItemText primary={file.name} secondary={file.kind} /></ListItem></Card>\n            })\n            }\n          </List>\n          </div>\n        :<div/>}\n      </header>\n      </div> \n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}